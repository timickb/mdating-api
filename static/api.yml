openapi: '3.0.2'
info:
  title: MIR Dating API
  version: 'indev'
servers:
  - url: localhost:5000

paths:
  /api/shops/{shopId}:
    get:
      summary: "Возвращает информацию о магазине по указанному идентификатору."
      parameters: [ $ref: "#/components/parameters/ShopId" ]
      responses:
        '200':
          description: "Информация о магазине в формате JSON."
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Shop"
        '404':
          $ref: "#/components/responses/404"
        '403':
          $ref: "#/components/responses/403"
    delete:
      summary: "Удаляет магазин с указанным идентификатором"
      parameters: [ $ref: "#/components/parameters/ShopId" ]
      responses:
        '200':
          description: "Информация о магазине в формате JSON."
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "OK"
        '404':
          $ref: "#/components/responses/404"
        '403':
          $ref: "#/components/responses/403"
    put:
      summary: "Заменяет объект магазина с указанным идентификатором на другой объект"
      parameters: [ $ref: "#/components/parameters/ShopId" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        '200':
          description: "При успешном обновлении магазина возвращается статус ОК"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "OK"
        '403':
          $ref: "#/components/responses/403"
        '422':
          $ref: "#/components/responses/422"
    patch:
      summary: "Заменяет некоторые параметры магазина с указанным идентификатором"
      parameters: [ $ref: "#/components/parameters/ShopId" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        '200':
          description: "При успешном обновлении параметров возвращается статус ОК"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "OK"
        '403':
          $ref: "#/components/responses/403"
        '422':
          $ref: "#/components/responses/422"

  /api/shops/:
    post:
      summary: "Добавляет в систему новый магазин."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Shop"
      responses:
        '200':
          description: "При успешном добавлении магазина возвращается статус ОК"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#/components/schemas/Shop"
        '403':
          $ref: "#/components/responses/403"
        '422':
          $ref: "#/components/responses/422"

  # get/put/patch/delete profile
  /api/profiles/{profileId}:
    # patch profile
    patch:
      summary: "Заменяет указанные параметры пользовательского профиля с указанным идентификатором."
      parameters: [ $ref: "#/components/parameters/ProfileId" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        '200':
          description: "При успешном обновлении профиля возвращается статус ОК"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "OK"
        '403':
          $ref: "#/components/responses/403"
        '422':
          $ref: "#/components/responses/422"
    # put profile
    put:
      summary: "Заменяет пользовательский профиль с указанным идентификатором на другой."
      parameters: [ $ref: "#/components/parameters/ProfileId" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        '200':
          description: "При успешном обновлении профиля возвращается статус ОК"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "OK"
        '403':
          $ref: "#/components/responses/403"
        '422':
          $ref: "#/components/responses/422"
    # delete profile
    delete:
      summary: "Удаляет пользовательский профиль с указанным идентификатором."
      parameters: [ $ref: "#/components/parameters/ProfileId" ]
      responses:
        '200':
          description: "Сообщение об успешном удалении профиля."
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "OK" 
        '404':
          $ref: "#/components/responses/404"
        '403':
          $ref: "#/components/responses/403"
    get:
      summary: "Возвращает пользовательский профиль по указанному идентификатору."
      #description: "Возвращает пользовательский профиль по указанному идентификатору."
      parameters: [ $ref: "#/components/parameters/ProfileId" ]
      responses:
        '200':
          description: "Профиль пользователя в формате JSON."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        '404':
          $ref: "#/components/responses/404"
        '403':
          $ref: "#/components/responses/403"
  # post profile                
  /api/profiles/:
    post:
      summary: "Добавляет в систему новый профиль и возвращает присвоенный ему идентификатор."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"   
      responses:
        '200':
          description: "При успешном добавлении нового профиля возвращается назад его содержимое с присовенным идентификатором"
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: object
                    properties:
                      profile:
                        $ref: "#/components/schemas/Profile"
        '403':
          $ref: "#/components/responses/403"
        '422':
          $ref: "#/components/responses/422"



components:
  responses:
    '403':
      description: "Нет прав на совершение операции."
      content:
        application/json:
          schema:
            properties:
              status:
                type: string
                example: "Error"
              error:
                $ref: "#/components/schemas/Error"
    '404':
      description: "Профиль с указанным идентификатором не найден."
      content:
        application/json:
          schema:
            properties:
              status:
                type: string
                example: "Error"
              error:
                $ref: "#/components/schemas/Error"
    '409':
      description: "Произошел конфликт: одновременно кто-то другой совершал операцию с данным объектом"
      content:
        application/json:
          schema:
            properties:
              status:
                type: string
                example: "Error"
              error:
                $ref: "#/components/schemas/Error"
    '422':
      description: "Одно или более из параметров профиля имеют недопустимое значение."
      content:
        application/json:
          schema:
            properties:
              status:
                type: string
                example: "Error"
              error:
                $ref: "#/components/schemas/Error"

  parameters:
    ProfileId:
      in: path
      name: profileId
      schema:
        type: integer
      required: true
      description: "Целое положительное число - идентификатор профиля."
    ShopId:
      in: path
      name: shopId
      schema:
        type: integer
      required: true
      description: "Целое положительное число - идентификатор магазина."
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 422
        message:
          type: string
          example: "Incorrect input data"
    Profile:
      type: object
      properties:
        version:
          type: integer
          example: 1
          description: "Данная величина используется для предотвращения конфликтов 
          при одновреенных запросах и инкрементируется после каждой модификации"
        id:
          type: integer
          example: 1
        firstname:
          type: string
          example: "Andrew"
        login:
          type: string
          example: "dh872jka"
        bio:
          type: string
          example: "skip me please"
        birthDate:
          type: string
          format: date-time          
          example: "01-01-1970"   

    Shop:
      type: object
      properties:
        version:
          type: integer
          example: 1
          description: "Данная величина используется для предотвращения конфликтов 
          при одновреенных запросах и инкрементируется после каждой модификации"
        id:
          type: integer
          example: 1
        location:
          type: string
          example: "Russia"
        name:
          type: string
          example: "Sample cafe"
    
    Transaction:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        shopId:
          type: integer
          example: 1
        date:
          type: string
          format: date-time
          example: "2021-02-19 20:40 GMT+3"
          
